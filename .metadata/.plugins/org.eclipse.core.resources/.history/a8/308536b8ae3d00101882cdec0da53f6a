package org.springframework.samples.Pet.repository;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.simple.JdbcClient;
import org.springframework.samples.Owner.OwnerPublicAPI;
import org.springframework.samples.Pet.model.Pet;
import org.springframework.samples.Pet.service.PetRepository;
import org.springframework.stereotype.Repository;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import java.sql.PreparedStatement;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import javax.sql.DataSource;

@Repository
public class PetRepositoryImpl implements PetRepository {



	    private final JdbcClient jdbcClient;
	    private final JdbcTemplate jdbcTemplate;
	    
	    private final OwnerPublicAPI ownerPublicAPI;
	    

	    public PetRepositoryImpl(@Qualifier("petJdbcClient") JdbcClient jdbcClient, 
	                            @Qualifier("petDataSource") DataSource dataSource, OwnerPublicAPI ownerPublicAPI) {
	        this.jdbcClient = jdbcClient;
	        this.jdbcTemplate = new JdbcTemplate(dataSource);
	        this.ownerPublicAPI = ownerPublicAPI;
	    }
	    


	@Override
	public List<Pet> findPetByOwnerId(Integer id) {
		return jdbcClient.sql("SELECT * FROM pets WHERE owner_id = ?")
				.param(id)
				.query(Pet.class)
				.list();
	}

	@Override
	public Optional<Pet> findPetByName(String name) {
		return jdbcClient.sql("SELECT * FROM pets WHERE name = ?")
				.param(name)
				.query(Pet.class)
				.optional();
	}

	@Override
	public Pet findById(Integer id) {
		return jdbcClient.sql("SELECT * FROM pets WHERE id = ?")
				.param(id)
				.query(Pet.class)
				.single();
	}

	

	@Override
	public void save(Pet.Visit petVisit) {
		jdbcClient.sql("INSERT INTO pet_visit (pet_id, visit_date, description) VALUES (?, ?, ?)")
				.params(petVisit.pet_id(), petVisit.visit_date(), petVisit.description())
				.update();

	}
	
	@Override
	public List<Pet.Visit> findVisitByPetId(Integer id) {
		return jdbcClient.sql("SELECT * FROM pet_visit WHERE pet_id = ?")
				.param(id)
				.query(Pet.Visit.class)
				.list();
	}
	
	@Override
	public List<Pet> findAll() {
		return jdbcClient.sql("SELECT * FROM pets")
				.query(Pet.class)
				.list();
	}
	
	@Override
	public Pet findById(int petId) {
		return jdbcClient.sql("SELECT * FROM pets WHERE id = ?")
				.param(petId)
				.query(Pet.class)
				.optional()
				.orElse(null);
	}
	
	@Override
	public void save(Pet pet) {
	    boolean isNew = (pet.getId() == null);
	    save(pet, isNew);
	}



	
	
	
}
