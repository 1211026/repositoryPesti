package org.springframework.samples.Pet.repository;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.simple.JdbcClient;
import org.springframework.samples.Pet.model.Pet;
import org.springframework.samples.Pet.service.PetRepository;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Optional;

@Repository
public class PetRepositoryImpl implements PetRepository {

	private final JdbcClient jdbcClient;

	public PetRepositoryImpl(@Qualifier("petJdbcClient") JdbcClient jdbcClient) {
		this.jdbcClient = jdbcClient;
	}

	@Override
	public List<Pet> findPetByOwnerId(Integer id) {
		return jdbcClient.sql("SELECT * FROM pets WHERE owner_id = ?")
				.param(id)
				.query(Pet.class)
				.list();
	}

	@Override
	public Optional<Pet> findPetByName(String name) {
		return jdbcClient.sql("SELECT * FROM pets WHERE name = ?")
				.param(name)
				.query(Pet.class)
				.optional();
	}

	@Override
	public Pet findById(Integer id) {
		return jdbcClient.sql("SELECT * FROM pets WHERE id = ?")
				.param(id)
				.query(Pet.class)
				.single();
	}

	@Override
	public void save(Pet pet, boolean isNew) {
	    if (isNew) {
	        KeyHolder keyHolder = new GeneratedKeyHolder();
	        
	        // Corrigir a consulta SQL e os parâmetros
	        jdbcTemplate.update(connection -> {
	            PreparedStatement ps = connection.prepareStatement(
	                "INSERT INTO pets (name, owner_id, type_id, birth_date) VALUES (?, ?, ?, ?)",
	                Statement.RETURN_GENERATED_KEYS
	            );
	            ps.setString(1, (String) pet.getName());
	            ps.setInt(2, pet.getOwnerId());
	            
	            // Verificar o tipo do pet.getType()
	            if (pet.getType() instanceof PetType) {
	                ps.setInt(3, ((PetType) pet.getType()).getId());
	            } else {
	                // Fallback para um tipo padrão se necessário
	                ps.setInt(3, 1); // Assumindo que 1 é um tipo válido
	            }
	            
	            // Verificar o tipo do pet.getBirthDate()
	            if (pet.getBirthDate() instanceof LocalDate) {
	                ps.setDate(4, java.sql.Date.valueOf((LocalDate) pet.getBirthDate()));
	            } else {
	                // Fallback para a data atual se necessário
	                ps.setDate(4, java.sql.Date.valueOf(LocalDate.now()));
	            }
	            
	            return ps;
	        }, keyHolder);
	        
	        // Atribuir o ID gerado ao pet
	        Number key = keyHolder.getKey();
	        if (key != null) {
	            pet.setId(key.intValue());
	            System.out.println("Pet saved with generated ID: " + pet.getId());
	        } else {
	            System.err.println("Failed to get generated ID for pet");
	        }
	    } else {
	        jdbcTemplate.update(
	            "UPDATE pets SET name = ?, owner_id = ?, type_id = ?, birth_date = ? WHERE id = ?",
	            pet.getName(), 
	            pet.getOwnerId(), 
	            ((PetType) pet.getType()).getId(), 
	            pet.getBirthDate() instanceof LocalDate ? pet.getBirthDate() : LocalDate.now(),
	            pet.getId()
	        );
	    }
	}

	@Override
	public void save(Pet.Visit petVisit) {
		jdbcClient.sql("INSERT INTO pet_visit (pet_id, visit_date, description) VALUES (?, ?, ?)")
				.params(petVisit.pet_id(), petVisit.visit_date(), petVisit.description())
				.update();

	}
	
	@Override
	public List<Pet.Visit> findVisitByPetId(Integer id) {
		return jdbcClient.sql("SELECT * FROM pet_visit WHERE pet_id = ?")
				.param(id)
				.query(Pet.Visit.class)
				.list();
	}
	
	@Override
	public List<Pet> findAll() {
		return jdbcClient.sql("SELECT * FROM pets")
				.query(Pet.class)
				.list();
	}
	
	@Override
	public Pet findById(int petId) {
		return jdbcClient.sql("SELECT * FROM pets WHERE id = ?")
				.param(petId)
				.query(Pet.class)
				.optional()
				.orElse(null);
	}
	
	
}
