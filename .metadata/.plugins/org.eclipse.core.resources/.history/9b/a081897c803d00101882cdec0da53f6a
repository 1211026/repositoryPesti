package org.springframework.samples.Pet.controller;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.data.domain.PageRequest;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.samples.Owner.model.Owner;
import org.springframework.samples.Owner.model.OwnerPet;
import org.springframework.samples.Owner.service.OwnerRepository;
import org.springframework.samples.Pet.model.Pet;
import org.springframework.samples.Pet.model.PetType;
import org.springframework.samples.Pet.service.PetRepository;
import org.springframework.samples.Visit.model.Visit;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.parameters.RequestBody;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/api")
@Tag(name = "pet-rest-controller", description = "Operations about pets")
public class PetRestController {
	
	@Autowired
	private PetApiService petApiService;

	@PostMapping("/owners/{ownerId}/pets")
	@Operation(summary = "Create a new pet for an owner")
	public ResponseEntity<Pet> createPet(@PathVariable("ownerId") int ownerId, @Valid @RequestBody Pet pet) {
	    // Verificar se o owner existe
	    Owner owner = this.owners.findById(ownerId);
	    if (owner == null) {
	        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	    }
	    
	    try {
	        // Usar o serviço dedicado para criar o pet
	        Pet createdPet = petApiService.createPet(pet, ownerId);
	        
	        return new ResponseEntity<>(createdPet, HttpStatus.CREATED);
	    } catch (Exception e) {
	        System.err.println("Erro ao criar pet: " + e.getMessage());
	        e.printStackTrace();
	        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	}

	@PutMapping("/owners/{ownerId}/pets/{petId}")
	@Operation(summary = "Update an existing pet")
	public ResponseEntity<Pet> updatePet(
	        @PathVariable("ownerId") int ownerId,
	        @PathVariable("petId") int petId,
	        @Valid @RequestBody Pet pet) {
	    
	    // Verificar se o owner existe
	    Owner owner = this.owners.findById(ownerId);
	    if (owner == null) {
	        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	    }
	    
	    try {
	        // Usar o serviço dedicado para atualizar o pet
	        Pet updatedPet = petApiService.updatePet(petId, pet);
	        
	        return new ResponseEntity<>(updatedPet, HttpStatus.OK);
	    } catch (IllegalArgumentException e) {
	        // Pet não encontrado
	        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
	    } catch (Exception e) {
	        System.err.println("Erro ao atualizar pet: " + e.getMessage());
	        e.printStackTrace();
	        return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	}

    

   

 

    
}