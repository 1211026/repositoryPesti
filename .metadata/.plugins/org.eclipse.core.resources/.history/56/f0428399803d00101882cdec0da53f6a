package org.springframework.samples.Pet.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.samples.Pet.PetExternalAPI;
import org.springframework.samples.Pet.model.Pet;
import org.springframework.samples.Pet.model.PetType;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/owners/{ownerId}")
@RequiredArgsConstructor
@Tag(name = "pet-rest-controller")
public class PetRestController {

    private final PetExternalAPI petExternalAPI;
    
    @Autowired
    public PetRestController(@Qualifier("petService") PetExternalAPI petExternalAPI) {
        this.petExternalAPI = petExternalAPI;
    }

    @GetMapping("/pettypes")
    @Operation(summary = "Get all pet types")
    public ResponseEntity<Collection<PetType>> getPetTypes() {
        return new ResponseEntity<>(this.petExternalAPI.findPetTypes(), HttpStatus.OK);
    }

    @GetMapping("/pets/{petId}")
    @Operation(summary = "Get pet by ID")
    public ResponseEntity<Pet> getPet(@PathVariable("petId") int petId) {
        Pet pet = this.petExternalAPI.getPetById(petId);
        if (pet == null) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(pet, HttpStatus.OK);
    }

    @PostMapping("/pets")
    @Operation(summary = "Create a new pet")
    public ResponseEntity<?> createPet(@PathVariable("ownerId") int ownerId, @Valid @RequestBody Pet pet, BindingResult result) {
        Map<String, Object> response = new HashMap<>();
        
        // Validar data de nascimento
        LocalDate currentDate = LocalDate.now();
        if (pet.getBirthDate() == null || ((LocalDate) pet.getBirthDate()).isAfter(currentDate)) {
            response.put("error", "Birth date cannot be null or in the future");
            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }

        // Verificar erros de validação
        if (result.hasErrors()) {
            response.put("errors", result.getAllErrors());
            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }

        // Configurar o ID do owner
        pet.setOwner_id(ownerId);

        // Salvar o pet
        Pet savedPet = petExternalAPI.save(pet);
        
        // Retornar o pet salvo
        response.put("message", "New Pet has been Added");
        response.put("pet", savedPet);
        return new ResponseEntity<>(response, HttpStatus.CREATED);
    }

    @PutMapping("/pets/{petId}")
    @Operation(summary = "Update an existing pet")
    public ResponseEntity<?> updatePet(
            @PathVariable("ownerId") int ownerId,
            @PathVariable("petId") int petId,
            @Valid @RequestBody Pet pet,
            BindingResult result) {
        
        Map<String, Object> response = new HashMap<>();
        
        // Validar data de nascimento
        if (pet.getBirthDate() != null && ((LocalDate) pet.getBirthDate()).isAfter(LocalDate.now())) {
            response.put("error", "Birth date cannot be in the future");
            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }

        // Verificar erros de validação
        if (result.hasErrors()) {
            response.put("errors", result.getAllErrors());
            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }

        // Verificar se o pet existe
        Pet existingPet = petExternalAPI.getPetById(petId);
        if (existingPet == null) {
            response.put("error", "Pet not found with ID: " + petId);
            return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
        }

        // Configurar o ID do pet e do owner
        pet.setId(petId);
        pet.setOwner_id(ownerId);

        // Salvar o pet atualizado
        petExternalAPI.save(pet);
        
        // Retornar o pet atualizado
        response.put("message", "Pet details has been edited");
        return new ResponseEntity<>(response, HttpStatus.OK);
    }
    
    @DeleteMapping("/pets/{petId}")
    @Operation(summary = "Delete a pet")
    public ResponseEntity<?> deletePet(@PathVariable("petId") int petId) {
        Pet pet = petExternalAPI.getPetById(petId);
        if (pet == null) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        
        // Implementar lógica de exclusão (se disponível no PetExternalAPI)
        // petExternalAPI.delete(petId);
        
        Map<String, Object> response = new HashMap<>();
        response.put("message", "Pet has been deleted");
        return new ResponseEntity<>(response, HttpStatus.OK);
    }
}