package org.springframework.samples;


import static org.assertj.core.api.Assertions.assertThat;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.samples.Owner.model.Owner;
import org.springframework.samples.Owner.model.OwnerPet;
import org.springframework.samples.Pet.model.Pet;
import org.springframework.samples.Pet.model.PetType;
import org.springframework.samples.Vet.model.Vet;
import org.springframework.samples.Vet.model.Vets;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

import io.qameta.allure.Step;
import net.jqwik.api.Arbitraries;
import net.jqwik.api.Arbitrary;
import net.jqwik.api.Assume;
import net.jqwik.api.Combinators;
import net.jqwik.api.ForAll;
import net.jqwik.api.Property;
import net.jqwik.api.Provide;
import net.jqwik.api.Tuple;
import net.jqwik.api.Tuple.Tuple2;
import net.jqwik.api.constraints.IntRange;

public class MetamorphicTests {

    private final String BASE_URL = "http://localhost:8080";
    private final String SWAGGER_URL = "http://localhost:8080/swagger-ui.html";
    private final RestTemplate restTemplate = new RestTemplate();
    
    private static void logToSwagger(String message) {
        System.out.println("Swagger Log: " + message);
    }
    
    @Property(tries = 5)
    @Step("Teste: Repetir lista de pets deve ser igual")
    void repeatedPetListShouldBeEqual(@ForAll("validOwnerData") Owner newOwner) {
        logToSwagger("Starting test: repeatedPetListShouldBeEqual");
        try {
            // Configurar o owner com um prefixo para identificação
            String uniquePrefix = "Repeat_" + UUID.randomUUID().toString().substring(0, 6);
            newOwner.setFirstName(uniquePrefix + "_" + newOwner.getFirstName());
            newOwner.setLastName("RepeatTest_" + newOwner.getLastName());
            
            // Garantir que todos os campos obrigatórios estejam preenchidos
            if (newOwner.getAddress() == null) newOwner.setAddress("Test Address");
            if (newOwner.getCity() == null) newOwner.setCity("Test City");
            if (newOwner.getTelephone() == null) newOwner.setTelephone("1234567890");
            
            System.out.println("Creating owner with name: " + newOwner.getFirstName() + " " + newOwner.getLastName());
            
            // Criar owner
            Owner createdOwner = createOwner(newOwner);
            assertThat(createdOwner).isNotNull();
            assertThat(createdOwner.getId()).isNotNull();
            System.out.println("Created owner with ID: " + createdOwner.getId());
            
            // Criar pet
            Pet newPet = new Pet();
            newPet.setName("RepeatPet_" + UUID.randomUUID().toString().substring(0, 8));
            newPet.setBirthDate(LocalDate.now().minusYears(1));
            
            PetType dogType = new PetType();
            dogType.setId(1);
            newPet.setType(dogType);
            
            // Definir o owner_id para o pet
            newPet.setOwner_id(createdOwner.getId());
            
            // Criar pet usando o formulário HTML
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
            
            MultiValueMap<String, String> petFormData = new LinkedMultiValueMap<>();
            petFormData.add("name", newPet.getName());
            petFormData.add("birthDate", newPet.getBirthDate().toString());
            petFormData.add("type", newPet.getType().getId().toString());
            
            HttpEntity<MultiValueMap<String, String>> petFormRequest = new HttpEntity<>(petFormData, headers);
            
            // Enviar o formulário para criar o pet
            System.out.println("Creating pet with name: " + newPet.getName());
            ResponseEntity<String> petFormResponse = restTemplate.exchange(
                BASE_URL + "/owners/" + createdOwner.getId() + "/pets/new",
                HttpMethod.POST,
                petFormRequest,
                String.class
            );
            
            // Verificar se a resposta é um redirecionamento (sucesso)
            assertThat(petFormResponse.getStatusCode().is3xxRedirection()).isTrue();
            
            // Extrair o ID do pet do redirecionamento ou buscar o pet criado
            String redirectUrl = petFormResponse.getHeaders().getLocation() != null 
                ? petFormResponse.getHeaders().getLocation().toString() 
                : petFormResponse.getHeaders().getFirst("Location");
                
            assertThat(redirectUrl).isNotNull();
            System.out.println("Redirect URL after pet creation: " + redirectUrl);
            
            // Esperar um pouco para garantir consistência (importante para versão assíncrona)
            Thread.sleep(2000);
            
            // Obter a lista de pets duas vezes
            System.out.println("Getting pet list first time");
            List<Pet> pets1 = getPets(createdOwner.getId());
            assertThat(pets1).isNotNull();
            assertThat(pets1).isNotEmpty();
            System.out.println("First pet list size: " + pets1.size());
            
            // Imprimir os IDs dos pets na primeira lista
            System.out.println("Pet IDs in first list: " + 
                pets1.stream().map(Pet::getId).map(String::valueOf).collect(Collectors.joining(", ")));
            
            // Pequena pausa entre as chamadas
            Thread.sleep(500);
            
            System.out.println("Getting pet list second time");
            List<Pet> pets2 = getPets(createdOwner.getId());
            assertThat(pets2).isNotNull();
            assertThat(pets2).isNotEmpty();
            System.out.println("Second pet list size: " + pets2.size());
            
            // Imprimir os IDs dos pets na segunda lista
            System.out.println("Pet IDs in second list: " + 
                pets2.stream().map(Pet::getId).map(String::valueOf).collect(Collectors.joining(", ")));
            
            // Verificar se as listas têm o mesmo tamanho
            assertThat(pets1.size()).isEqualTo(pets2.size());
            
            // Verificar se todos os pets da primeira lista estão na segunda
            Set<Integer> ids1 = pets1.stream().map(Pet::getId).collect(Collectors.toSet());
            Set<Integer> ids2 = pets2.stream().map(Pet::getId).collect(Collectors.toSet());
            
            System.out.println("IDs in first set: " + ids1);
            System.out.println("IDs in second set: " + ids2);
            
            assertThat(ids1).isEqualTo(ids2);
            
            // Encontrar o pet que acabamos de criar
            Optional<Pet> createdPetOpt = pets1.stream()
                .filter(p -> p.getName() != null && p.getName().startsWith("RepeatPet_"))
                .findFirst();
                
            if (createdPetOpt.isPresent()) {
                Pet createdPet = createdPetOpt.get();
                System.out.println("Found created pet with ID: " + createdPet.getId());
                
                logToSwagger("Test passed: repeatedPetListShouldBeEqual - Owner ID: " + createdOwner.getId() + 
                            ", Pet ID: " + createdPet.getId());
            } else {
                System.out.println("Could not find the created pet in the list");
                logToSwagger("Test passed: repeatedPetListShouldBeEqual - Owner ID: " + createdOwner.getId() + 
                            ", but created pet not found in list");
            }
        } catch (Exception e) {
            System.err.println("Error in repeatedPetListShouldBeEqual: " + e.getMessage());
            e.printStackTrace();
            logToSwagger("Test failed: repeatedPetListShouldBeEqual - " + e.getMessage());
            // Pular o teste em caso de erro do servidor
            Assume.that(false);
        }
    }
    
    @Property(tries = 5)
    @Step("Teste: Sobrenomes diferentes devem retornar owners disjuntos")
    void differentLastNamesShouldReturnDisjointOwners(@ForAll("distinctLastNames") Tuple2<String, String> names) {
        logToSwagger("Starting test: differentLastNamesShouldReturnDisjointOwners");
        try {
            System.out.println("Testing with distinct last names: '" + names.get1() + "' and '" + names.get2() + "'");
            
            // Criar primeiro owner com o primeiro sobrenome
            Owner o1 = validOwnerData().sample();
            o1.setFirstName("Distinct1_" + o1.getFirstName());
            o1.setLastName(names.get1());
            
            // Garantir que todos os campos obrigatórios estejam preenchidos
            if (o1.getAddress() == null) o1.setAddress("Address1");
            if (o1.getCity() == null) o1.setCity("City1");
            if (o1.getTelephone() == null) o1.setTelephone("1234567890");
            
            System.out.println("Creating first owner: " + o1.getFirstName() + " " + o1.getLastName());
            Owner createdOwner1 = createOwner(o1);
            System.out.println("Created first owner with ID: " + createdOwner1.getId());
            
            // Criar segundo owner com o segundo sobrenome
            Owner o2 = validOwnerData().sample();
            o2.setFirstName("Distinct2_" + o2.getFirstName());
            o2.setLastName(names.get2());
            
            // Garantir que todos os campos obrigatórios estejam preenchidos
            if (o2.getAddress() == null) o2.setAddress("Address2");
            if (o2.getCity() == null) o2.setCity("City2");
            if (o2.getTelephone() == null) o2.setTelephone("0987654321");
            
            System.out.println("Creating second owner: " + o2.getFirstName() + " " + o2.getLastName());
            Owner createdOwner2 = createOwner(o2);
            System.out.println("Created second owner with ID: " + createdOwner2.getId());
            
            // Esperar um pouco para garantir que os owners estejam indexados para busca (importante para versão assíncrona)
            Thread.sleep(2000);
            
            // Buscar owners pelo primeiro sobrenome
            System.out.println("Searching for owners with last name: " + names.get1());
            List<Owner> owners1 = searchOwners(names.get1());
            System.out.println("Found " + owners1.size() + " owners with last name: " + names.get1());
            
            // Buscar owners pelo segundo sobrenome
            System.out.println("Searching for owners with last name: " + names.get2());
            List<Owner> owners2 = searchOwners(names.get2());
            System.out.println("Found " + owners2.size() + " owners with last name: " + names.get2());
            
            // Extrair os IDs dos owners encontrados
            Set<Integer> ids1 = owners1.stream().map(Owner::getId).collect(Collectors.toSet());
            Set<Integer> ids2 = owners2.stream().map(Owner::getId).collect(Collectors.toSet());
            
            System.out.println("IDs for first last name: " + ids1);
            System.out.println("IDs for second last name: " + ids2);
            
            // Verificar se há interseção entre os conjuntos
            Set<Integer> intersection = new HashSet<>(ids1);
            intersection.retainAll(ids2);
            
            System.out.println("Intersection of IDs: " + intersection);
            
            // Verificar se a interseção está vazia (conjuntos disjuntos)
            assertThat(intersection).isEmpty();
            
            logToSwagger("Test passed: differentLastNamesShouldReturnDisjointOwners - Names: " + 
                        names.get1() + ", " + names.get2());
        } catch (Exception e) {
            System.err.println("Error in differentLastNamesShouldReturnDisjointOwners: " + e.getMessage());
            e.printStackTrace();
            logToSwagger("Test failed: differentLastNamesShouldReturnDisjointOwners - " + e.getMessage());
            // Pular o teste em caso de erro do servidor
            Assume.that(false);
        }
    }
    
    @Property(tries = 5)
    @Step("Teste: Lista de veterinários deve ser consistente")
    void vetListShouldBeConsistent() {
        logToSwagger("Starting test: vetListShouldBeConsistent");
        try {
            // Configurar o cabeçalho para aceitar JSON explicitamente
            HttpHeaders headers = new HttpHeaders();
            headers.setAccept(Collections.singletonList(MediaType.APPLICATION_JSON));
            HttpEntity<String> entity = new HttpEntity<>(headers);
            
            System.out.println("Requesting vets list from: " + BASE_URL + "/vets");
            
            // Tentar obter a lista de veterinários usando o endpoint /vets com cabeçalho JSON
            ResponseEntity<Vets> response = restTemplate.exchange(
                BASE_URL + "/vets",
                HttpMethod.GET,
                entity,
                Vets.class
            );
            
            // Verificar se a resposta foi bem-sucedida
            if (!response.getStatusCode().is2xxSuccessful()) {
                System.out.println("Endpoint returned non-success status code: " + response.getStatusCode());
                Assume.that(false);
                return;
            }
            
            if (response.getBody() == null) {
                System.out.println("Endpoint returned null body");
                Assume.that(false);
                return;
            }
            
            if (response.getBody().getVetList() == null || response.getBody().getVetList().isEmpty()) {
                System.out.println("No vets found in database or endpoint returned empty list");
                Assume.that(false);
                return;
            }
            
            List<Vet> vets1 = response.getBody().getVetList();
            System.out.println("Found " + vets1.size() + " vets in first request");
            
            // Imprimir os IDs dos veterinários na primeira lista para depuração
            System.out.println("Vet IDs in first request: " + 
                vets1.stream().map(Vet::getId).map(String::valueOf).collect(Collectors.joining(", ")));
            
            // Pequena pausa entre as requisições
            Thread.sleep(500);
            
            System.out.println("Making second request to: " + BASE_URL + "/vets");
            
            // Fazer uma segunda requisição para verificar consistência
            ResponseEntity<Vets> response2 = restTemplate.exchange(
                BASE_URL + "/vets",
                HttpMethod.GET,
                entity,
                Vets.class
            );
            
            // Verificar se a segunda resposta foi bem-sucedida
            if (!response2.getStatusCode().is2xxSuccessful() || 
                response2.getBody() == null || 
                response2.getBody().getVetList() == null || 
                response2.getBody().getVetList().isEmpty()) {
                System.out.println("Second request failed or returned empty list");
                Assume.that(false);
                return;
            }
            
            List<Vet> vets2 = response2.getBody().getVetList();
            System.out.println("Found " + vets2.size() + " vets in second request");
            
            // Imprimir os IDs dos veterinários na segunda lista para depuração
            System.out.println("Vet IDs in second request: " + 
                vets2.stream().map(Vet::getId).map(String::valueOf).collect(Collectors.joining(", ")));
            
            // Verificar se as duas listas têm o mesmo tamanho
            boolean sameSizeCheck = vets1.size() == vets2.size();
            System.out.println("Lists have same size: " + sameSizeCheck);
            
            if (!sameSizeCheck) {
                System.out.println("First list size: " + vets1.size() + ", Second list size: " + vets2.size());
                // Não falhar imediatamente, continuar para verificar os IDs
            }
            
            // Verificar se todos os veterinários da primeira lista estão na segunda
            // Comparar apenas os IDs em vez de objetos completos
            Set<Integer> ids1 = vets1.stream().map(Vet::getId).collect(Collectors.toSet());
            Set<Integer> ids2 = vets2.stream().map(Vet::getId).collect(Collectors.toSet());
            
            System.out.println("IDs in first set: " + ids1);
            System.out.println("IDs in second set: " + ids2);
            
            // Verificar diferenças entre os conjuntos
            Set<Integer> onlyInFirst = new HashSet<>(ids1);
            onlyInFirst.removeAll(ids2);
            
            Set<Integer> onlyInSecond = new HashSet<>(ids2);
            onlyInSecond.removeAll(ids1);
            
            if (!onlyInFirst.isEmpty()) {
                System.out.println("IDs only in first set: " + onlyInFirst);
            }
            
            if (!onlyInSecond.isEmpty()) {
                System.out.println("IDs only in second set: " + onlyInSecond);
            }
            
            // Verificar se os conjuntos são iguais
            assertThat(ids1).isEqualTo(ids2);
            
            // Verificar se as duas listas têm o mesmo tamanho (agora que já verificamos os IDs)
            assertThat(vets1).hasSameSizeAs(vets2);
            
            logToSwagger("Test passed: vetListShouldBeConsistent - Vet count: " + vets1.size());
        } catch (Exception e) {
            System.err.println("Error in vetListShouldBeConsistent: " + e.getMessage());
            e.printStackTrace();
            // Pular o teste em caso de erro do servidor
            System.out.println("Skipping test due to server error: " + e.getMessage());
            logToSwagger("Test skipped: vetListShouldBeConsistent - " + e.getMessage());
            Assume.that(false);
        }
    }
    
    // Métodos auxiliares para os testes
    
    private Owner createOwner(Owner owner) {
       