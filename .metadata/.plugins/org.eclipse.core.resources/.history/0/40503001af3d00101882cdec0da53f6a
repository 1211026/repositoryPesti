package org.springframework.samples.Pet.service;

import lombok.RequiredArgsConstructor;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.samples.Owner.OwnerPublicAPI;
import org.springframework.samples.Pet.PetExternalAPI;
import org.springframework.samples.Pet.PetPublicAPI;
import org.springframework.samples.Pet.model.Pet;
import org.springframework.samples.Pet.model.PetType;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDate;
import java.util.Collection;
import java.util.Optional;


@Service
@RequiredArgsConstructor
public class PetService implements PetExternalAPI, PetPublicAPI {

    private final PetRepository petRepository;
    private final PetTypeRepository petTypeRepository;
    private final OwnerPublicAPI ownerPublicAPI;
    
    
    @Autowired
    public PetService(PetRepository petRepository, PetTypeRepository petTypeRepository, OwnerPublicAPI ownerPublicAPI) {
		this.petRepository = petRepository;
		this.petTypeRepository = petTypeRepository;
		this.ownerPublicAPI = ownerPublicAPI;
	}
    
    @Override
    public Collection<PetType> findPetTypes() {
        return petTypeRepository.findPetTypes();
    }

    @Override
    public Pet getPetById(Integer petId) {
        return petRepository.findById(petId);
    }

    @Override
    public Optional<Pet> getPetByName(String name, boolean isNew) {
        return petRepository.findPetByName(name);
    }
    @Override
    @Transactional
    public void save(Pet pet) {
        boolean isNew = (pet.getId() == null);
        
        // Verificar se o owner_id está definido
        if (pet.getOwner_id() == null || pet.getOwner_id() == 0) {
            System.err.println("ERRO: owner_id não definido para o pet " + pet.getName());
            throw new IllegalArgumentException("owner_id não pode ser nulo ou zero");
        }
        
        // Verificar se o tipo está definido
        if (pet.getType() == null) {
            System.err.println("ERRO: tipo não definido para o pet " + pet.getName());
            throw new IllegalArgumentException("tipo não pode ser nulo");
        }
        
        // Salvar o pet no banco de dados
        try {
            petRepository.save(pet, isNew);
            System.out.println("Pet salvo com sucesso. ID: " + pet.getId() + ", Nome: " + pet.getName() + ", Owner ID: " + pet.getOwner_id());
        } catch (Exception e) {
            System.err.println("Erro ao salvar pet: " + e.getMessage());
            e.printStackTrace();
            throw e;
        }
        
        // Extrair os valores com os tipos corretos
        Integer petId = pet.getId();
        String petName = pet.getName();
        Integer ownerId = pet.getOwner_id();
        LocalDate birthDate = null;
        
        // Converter birthDate para LocalDate se necessário
        if (pet.getBirthDate() instanceof LocalDate) {
            birthDate = (LocalDate) pet.getBirthDate();
        } else if (pet.getBirthDate() != null) {
            try {
                birthDate = LocalDate.parse(pet.getBirthDate().toString());
            } catch (Exception e) {
                birthDate = LocalDate.now();
                System.err.println("Erro ao converter birthDate: " + e.getMessage() + ". Usando data atual.");
            }
        } else {
            birthDate = LocalDate.now();
        }
        
        // Extrair o nome do tipo
        String typeName = "";
        if (pet.getType() != null) {
            if (pet.getType() instanceof PetType) {
                typeName = ((PetType) pet.getType()).getName();
            } else if (pet.getType().getName() != null) {
                typeName = pet.getType().getName();
            } else {
                typeName = pet.getType().toString();
            }
        }
        
        // Se o tipo for vazio, use um valor padrão
        if (typeName.isEmpty()) {
            typeName = "Unknown";
            System.err.println("AVISO: tipo vazio para o pet " + pet.getName() + ". Usando 'Unknown'.");
        }
        
        // Verificar se ownerId é nulo
        if (ownerId == null) {
            System.err.println("ERRO: owner_id nulo para o pet " + pet.getName() + " após salvar.");
            return;
        }
        
        // Chamar o método com os tipos corretos
        try {
            ownerPublicAPI.savePet(petId, petName, typeName, ownerId, birthDate);
            System.out.println("Pet associado ao owner com sucesso. Pet ID: " + petId + ", Owner ID: " + ownerId);
            
            // Publicar evento se estiver usando eventos
            if (events != null) {
                events.publishEvent(new SavePetEvent(petId, petName, birthDate, 
                    pet.getType().getId(), typeName, ownerId, isNew));
            }
        } catch (Exception e) {
            System.err.println("Erro ao associar pet ao owner: " + e.getMessage());
            e.printStackTrace();
        }
    }
    @Override
    public void saveVisit(Integer id, LocalDate date, String description, Integer pet_id) {
        petRepository.save(new Pet.Visit(id,description,date,pet_id));
    }
    
    @Override
    public Pet findById(int petId) {
		return petRepository.findById(petId);
	}
    

}