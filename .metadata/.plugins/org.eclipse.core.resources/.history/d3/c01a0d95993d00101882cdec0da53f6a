package org.springframework.samples.Pet.controller;

import io.micrometer.core.ipc.http.HttpSender.Method;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.samples.Owner.OwnerExternalAPI;
import org.springframework.samples.Owner.model.Owner;
import org.springframework.samples.Owner.model.OwnerPet;
import org.springframework.samples.Pet.PetExternalAPI;
import org.springframework.samples.Pet.model.Pet;
import org.springframework.samples.Pet.model.PetType;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api")
@RequiredArgsConstructor
@Tag(name = "pet-rest-controller")
public class PetRestController {

    private final PetExternalAPI petExternalAPI;
    
    private final OwnerExternalAPI owners;
    
    @Autowired
    public PetRestController(@Qualifier("petService") PetExternalAPI petExternalAPI, 
							 @Qualifier("ownerService") OwnerExternalAPI ownerExternalAPI) {
        this.petExternalAPI = petExternalAPI;
        this.owners = ownerExternalAPI;
    }

    @GetMapping("/pettypes")
    @Operation(summary = "Get all pet types")
    public ResponseEntity<Collection<PetType>> getPetTypes() {
        return new ResponseEntity<>(this.petExternalAPI.findPetTypes(), HttpStatus.OK);
    }

    @GetMapping("/pets/{petId}")
    @Operation(summary = "Get pet by ID")
    public ResponseEntity<Pet> getPet(@PathVariable("petId") int petId) {
        Pet pet = this.petExternalAPI.getPetById(petId);
        if (pet == null) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(pet, HttpStatus.OK);
    }

    @PostMapping("/owners/{ownerId}/pets")
    @Operation(summary = "Create a new pet for an owner")
    public ResponseEntity<Pet> createPet(@PathVariable("ownerId") int ownerId, @Valid @RequestBody Pet pet) {
        System.out.println("DEBUG: Iniciando criação de pet para owner ID: " + ownerId);
        
        try {
            Owner owner = this.owners.findById(ownerId);
            if (owner == null) {
                System.out.println("DEBUG: Owner não encontrado com ID: " + ownerId);
                return new ResponseEntity<>(HttpStatus.NOT_FOUND);
            }
            
            System.out.println("DEBUG: Owner encontrado: " + owner.getFirstName() + " " + owner.getLastName());
            
            // Verificar o tipo do parâmetro esperado pelo método addPet
            System.out.println("DEBUG: Verificando o tipo do parâmetro esperado pelo método addPet");
            
            // Verificar se estamos no contexto do monolito ou do modulith
            String ownerClassName = owner.getClass().getName();
            System.out.println("DEBUG: Classe do Owner: " + ownerClassName);
            
            if (ownerClassName.contains("petclinic.model")) {
                // Estamos no monolito, onde Owner.addPet espera um Pet
                System.out.println("DEBUG: Contexto: Monolito - Owner.addPet espera um Pet");
                
                // Usar o método addPet do Owner do monolito
                try {
                    // Obter o método addPet que aceita Pet
                    java.lang.reflect.Method addPetMethod = owner.getClass().getMethod("addPet", org.springframework.samples.petclinic.model.Pet.class);
                    
                    // Verificar se o pet é do tipo correto
                    if (pet instanceof org.springframework.samples.petclinic.model.Pet) {
                        // Chamar o método
                        addPetMethod.invoke(owner, pet);
                        System.out.println("DEBUG: Pet adicionado ao owner via método addPet");
                    } else {
                        System.out.println("DEBUG: Pet não é do tipo esperado pelo método addPet");
                        return new ResponseEntity<>(HttpStatus.BAD_REQUEST);
                    }
                } catch (Exception e) {
                    System.err.println("DEBUG: Erro ao chamar método addPet: " + e.getMessage());
                    e.printStackTrace();
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            } else {
                // Estamos no modulith, onde Owner.addPet espera um OwnerPet
                System.out.println("DEBUG: Contexto: Modulith - Owner.addPet espera um OwnerPet");
                
                // Converter Pet para OwnerPet
                try {
                    // Criar um OwnerPet com os dados do Pet
                    Class<?> ownerPetClass = Class.forName("org.springframework.samples.Owner.model.OwnerPet");
                    Constructor<?> constructor = ownerPetClass.getConstructor(Integer.class, String.class, LocalDate.class, Integer.class, String.class);
                    
                    // Extrair os dados do Pet
                    Integer petId = null;
                    if (pet.getId() != null) {
                        petId = (Integer) pet.getId();
                    }
                    
                    String petName = (String) pet.getName();
                    LocalDate birthDate = (LocalDate) pet.getBirthDate();
                    String typeName = "";
                    if (pet.getType() != null) {
                        typeName = pet.getType().getName();
                    }
                    
                    // Criar o OwnerPet
                    Object ownerPet = constructor.newInstance(petId, petName, birthDate, ownerId, typeName);
                    System.out.println("DEBUG: OwnerPet criado com sucesso");
                    
                    // Chamar o método addPet com o OwnerPet
                    java.lang.reflect.Method addPetMethod = owner.getClass().getMethod("addPet", ownerPetClass);
                    addPetMethod.invoke(owner, ownerPet);
                    System.out.println("DEBUG: OwnerPet adicionado ao owner via método addPet");
                } catch (Exception e) {
                    System.err.println("DEBUG: Erro ao converter Pet para OwnerPet: " + e.getMessage());
                    e.printStackTrace();
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
            
            // Salvar o owner, que cascateia para o pet
            try {
                System.out.println("DEBUG: Tentando salvar owner");
                this.owners.save(owner);
                System.out.println("DEBUG: Owner salvo com sucesso");
            } catch (Exception e) {
                System.err.println("DEBUG: Erro ao salvar owner: " + e.getMessage());
                e.printStackTrace();
                return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
            }
            
            return new ResponseEntity<>(pet, HttpStatus.CREATED);
        } catch (Exception e) {
            System.err.println("DEBUG: Erro geral ao criar pet: " + e.getMessage());
            e.printStackTrace();
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    @PutMapping("/pets/{petId}")
    @Operation(summary = "Update an existing pet")
    public ResponseEntity<?> updatePet(
            @PathVariable("ownerId") int ownerId,
            @PathVariable("petId") int petId,
            @Valid @RequestBody Pet pet,
            BindingResult result) {
        
        Map<String, Object> response = new HashMap<>();
        
        // Validar data de nascimento
        if (pet.getBirthDate() != null && ((LocalDate) pet.getBirthDate()).isAfter(LocalDate.now())) {
            response.put("error", "Birth date cannot be in the future");
            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }

        // Verificar erros de validação
        if (result.hasErrors()) {
            response.put("errors", result.getAllErrors());
            return new ResponseEntity<>(response, HttpStatus.BAD_REQUEST);
        }

        // Verificar se o pet existe
        Pet existingPet = petExternalAPI.getPetById(petId);
        if (existingPet == null) {
            response.put("error", "Pet not found with ID: " + petId);
            return new ResponseEntity<>(response, HttpStatus.NOT_FOUND);
        }

        // Configurar o ID do pet e do owner
        pet.setId(petId);
        pet.setOwner_id(ownerId);

        // Salvar o pet atualizado
        petExternalAPI.save(pet);
        
        // Retornar o pet atualizado
        response.put("message", "Pet details has been edited");
        return new ResponseEntity<>(response, HttpStatus.OK);
    }
    
    @GetMapping("/pets/owners/{ownerId}/pets")
    @Operation(summary = "Get all pets for an owner")
    public ResponseEntity<List<Pet>> getPetsByOwnerId(@PathVariable("ownerId") int ownerId) {
        Owner owner = this.owners.findById(ownerId);
        if (owner == null) {
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        
        List<OwnerPet> ownerPets = owner.getPets();
        
        // Converter OwnerPet para Pet
        List<Pet> pets = ownerPets.stream()
            .map(ownerPet -> {
                Pet pet = new Pet();
                pet.setId((Integer) ownerPet.getId());
                pet.setName(ownerPet.getName());
                pet.setBirthDate((LocalDate) ownerPet.getBirthDate());
                
                // Configurar o tipo do pet se disponível
                if (ownerPet.getType_name() != null) {
                    PetType petType = new PetType();
                    petType.setName(ownerPet.getType_name());
                    pet.setType(petType);
                }
                
                return pet;
            })
            .collect(Collectors.toList());
        
        return new ResponseEntity<>(pets, HttpStatus.OK);
    }
}