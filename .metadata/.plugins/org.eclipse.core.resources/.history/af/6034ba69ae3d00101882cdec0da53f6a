package org.springframework.samples.Pet.repository;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.simple.JdbcClient;
import org.springframework.samples.Owner.OwnerPublicAPI;
import org.springframework.samples.Pet.model.Pet;
import org.springframework.samples.Pet.service.PetRepository;
import org.springframework.stereotype.Repository;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import java.sql.PreparedStatement;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import javax.sql.DataSource;

@Repository
public class PetRepositoryImpl implements PetRepository {



	    private final JdbcClient jdbcClient;
	    private final JdbcTemplate jdbcTemplate;
	    
	    private final PetRepository petRepository;
	    
	    private final OwnerPublicAPI ownerPublicAPI;

	    public PetRepositoryImpl(@Qualifier("petJdbcClient") JdbcClient jdbcClient, 
	                            @Qualifier("petDataSource") DataSource dataSource, @Qualifier("petRepository") PetRepository petRepository) {
	        this.jdbcClient = jdbcClient;
	        this.jdbcTemplate = new JdbcTemplate(dataSource);
	        this.petRepository = petRepository;
	    }
	    


	@Override
	public List<Pet> findPetByOwnerId(Integer id) {
		return jdbcClient.sql("SELECT * FROM pets WHERE owner_id = ?")
				.param(id)
				.query(Pet.class)
				.list();
	}

	@Override
	public Optional<Pet> findPetByName(String name) {
		return jdbcClient.sql("SELECT * FROM pets WHERE name = ?")
				.param(name)
				.query(Pet.class)
				.optional();
	}

	@Override
	public Pet findById(Integer id) {
		return jdbcClient.sql("SELECT * FROM pets WHERE id = ?")
				.param(id)
				.query(Pet.class)
				.single();
	}

	@Override
	public void save(Pet pet) {
	    boolean isNew = (pet.getId() == null);
	    
	    // Verificar se o owner_id está definido
	    if (pet.getOwner_id() == null || pet.getOwner_id() == 0) {
	        System.err.println("ERRO: owner_id não definido para o pet " + pet.getName());
	        throw new IllegalArgumentException("owner_id não pode ser nulo ou zero");
	    }
	    
	    // Verificar se o tipo está definido
	    if (pet.getType() == null || pet.getType().getId() == null) {
	        System.err.println("ERRO: tipo não definido para o pet " + pet.getName());
	        throw new IllegalArgumentException("tipo não pode ser nulo");
	    }
	    
	    // Salvar o pet no banco de dados
	    try {
	        petRepository.save(pet);
	        System.out.println("Pet salvo com sucesso. ID: " + pet.getId() + ", Nome: " + pet.getName() + ", Owner ID: " + pet.getOwner_id());
	    } catch (Exception e) {
	        System.err.println("Erro ao salvar pet: " + e.getMessage());
	        e.printStackTrace();
	        throw e;
	    }
	    
	    // Extrair os valores com os tipos corretos
	    Integer petId = pet.getId();
	    String petName = pet.getName();
	    Integer ownerId = pet.getOwner_id();
	    LocalDate birthDate = null;
	    
	    // Converter birthDate para LocalDate se necessário
	    if (pet.getBirthDate() instanceof LocalDate) {
	        birthDate = (LocalDate) pet.getBirthDate();
	    } else if (pet.getBirthDate() != null) {
	        try {
	            birthDate = LocalDate.parse(pet.getBirthDate().toString());
	        } catch (Exception e) {
	            birthDate = LocalDate.now();
	            System.err.println("Erro ao converter birthDate: " + e.getMessage() + ". Usando data atual.");
	        }
	    }
	    
	    // Extrair o nome do tipo
	    String typeName = null;
	    if (pet.getType() != null) {
	        typeName = pet.getType().getName();
	    }
	    
	    // Se o tipo for nulo, use um valor padrão
	    if (typeName == null) {
	        typeName = "Unknown";
	        System.err.println("AVISO: tipo nulo para o pet " + pet.getName() + ". Usando 'Unknown'.");
	    }
	    
	    // Verificar se ownerId é nulo e atribuir um valor padrão se necessário
	    if (ownerId == null) {
	        System.err.println("ERRO: owner_id nulo para o pet " + pet.getName() + " após salvar.");
	        return;
	    }
	    
	    // Se birthDate for nulo, use a data atual
	    if (birthDate == null) {
	        birthDate = LocalDate.now();
	        System.err.println("AVISO: birthDate nulo para o pet " + pet.getName() + ". Usando data atual.");
	    }
	    
	    // Chamar o método com os tipos corretos
	    try {
	        ownerPublicAPI.savePet(petId, petName, typeName, ownerId, birthDate);
	        System.out.println("Pet associado ao owner com sucesso. Pet ID: " + petId + ", Owner ID: " + ownerId);
	    } catch (Exception e) {
	        System.err.println("Erro ao associar pet ao owner: " + e.getMessage());
	        e.printStackTrace();
	    }
	}

	@Override
	public void save(Pet.Visit petVisit) {
		jdbcClient.sql("INSERT INTO pet_visit (pet_id, visit_date, description) VALUES (?, ?, ?)")
				.params(petVisit.pet_id(), petVisit.visit_date(), petVisit.description())
				.update();

	}
	
	@Override
	public List<Pet.Visit> findVisitByPetId(Integer id) {
		return jdbcClient.sql("SELECT * FROM pet_visit WHERE pet_id = ?")
				.param(id)
				.query(Pet.Visit.class)
				.list();
	}
	
	@Override
	public List<Pet> findAll() {
		return jdbcClient.sql("SELECT * FROM pets")
				.query(Pet.class)
				.list();
	}
	
	@Override
	public Pet findById(int petId) {
		return jdbcClient.sql("SELECT * FROM pets WHERE id = ?")
				.param(petId)
				.query(Pet.class)
				.optional()
				.orElse(null);
	}



	
	
	
}
