package org.springframework.samples.Pet.service;

import lombok.RequiredArgsConstructor;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.samples.Owner.OwnerPublicAPI;
import org.springframework.samples.Pet.PetExternalAPI;
import org.springframework.samples.Pet.PetPublicAPI;
import org.springframework.samples.Pet.model.Pet;
import org.springframework.samples.Pet.model.PetType;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.Collection;
import java.util.Optional;


@Service
@RequiredArgsConstructor
public class PetService implements PetExternalAPI, PetPublicAPI {

    private final PetRepository petRepository;
    private final PetTypeRepository petTypeRepository;
    private final OwnerPublicAPI ownerPublicAPI;
    
    
    @Autowired
    public PetService(PetRepository petRepository, PetTypeRepository petTypeRepository, OwnerPublicAPI ownerPublicAPI) {
		this.petRepository = petRepository;
		this.petTypeRepository = petTypeRepository;
		this.ownerPublicAPI = ownerPublicAPI;
	}
    
    @Override
    public Collection<PetType> findPetTypes() {
        return petTypeRepository.findPetTypes();
    }

    @Override
    public Pet getPetById(Integer petId) {
        return petRepository.findById(petId);
    }

    @Override
    public Optional<Pet> getPetByName(String name, boolean isNew) {
        return petRepository.findPetByName(name);
    }

    @Override
    public void save(Pet pet) {
        boolean isNew = (pet.getId() == null);
        petRepository.save(pet, isNew);
        
        // Extrair os valores com os tipos corretos
        Integer petId = (Integer) pet.getId();
        String petName = (String) pet.getName();
        Integer ownerId = (Integer) pet.getOwner_id();
        LocalDate birthDate = null;
        
        // Converter birthDate para LocalDate se necessário
        if (pet.getBirthDate() instanceof LocalDate) {
            birthDate = (LocalDate) pet.getBirthDate();
        } else if (pet.getBirthDate() != null) {
            // Tente converter de outra forma se necessário
            try {
                birthDate = LocalDate.parse(pet.getBirthDate().toString());
            } catch (Exception e) {
                // Se não conseguir converter, use a data atual
                birthDate = LocalDate.now();
            }
        }
        
        // Extrair o nome do tipo
        
        String typeName = null;
        if (pet.getType() != null) {
			typeName = pet.getType().getName();
		}
        
        // Se o tipo for nulo, use um valor padrão ou trate o caso conforme necessário
        if (typeName == null) {
			typeName = "Unknown"; // ou outro valor padrão
		}
        
        // Verificar se ownerId é nulo e atribuir um valor padrão se necessário
        if (ownerId == null) {
			ownerId = 0; // ou outro valor padrão
		}
        
        // Se birthDate for nulo, use a data atual
        if (birthDate == null) {
        				birthDate = LocalDate.now(); // ou outro valor padrão
        }
        
        // Chamar o método com os tipos corretos
        ownerPublicAPI.savePet(petId, petName, typeName, ownerId, birthDate);
    }

    @Override
    public void saveVisit(Integer id, LocalDate date, String description, Integer pet_id) {
        petRepository.save(new Pet.Visit(id,description,date,pet_id));
    }
    
    @Override
    public Pet findById(int petId) {
		return petRepository.findById(petId);
	}
    

}